#include "my_shell.h"



/**
 * my_get_next_line - Read the next line of input from STDIN
 * @info: parameter struct
 * @buffer: address of pointer to buffer, preallocated or NULL
 * @size: size of preallocated buffer if not NULL
 * Return: The length of the line read, or -1 on failure
 */
int my_get_next_line(info *info, char **buffer, size_t *size)
{
	static char read_buf[BUFFER_SIZE];
	static size_t read_idx, read_len;
	size_t newline_idx;
	ssize_t read_result = 0, line_length = 0;
	char *current_buf = NULL, *new_buf = NULL, *newline_ptr;

	current_buf = *buffer;
	if (current_buf && size)
		line_length = *size;

	if (read_idx == read_len)
	{
		read_idx = 0;
		read_result = read_buffer(info, read_buf, &read_len);
		if (read_result == -1 || (read_result == 0 && read_len == 0))
		{
			if (line_length)
			{
				free(current_buf);
				current_buf = NULL;
				line_length = 0;
			}
			return (-1);
		}
	}

	newline_ptr = strchr(read_buf + read_idx, '\n');
	newline_idx = newline_ptr ? 1 + (size_t)(newline_ptr - read_buf) : read_len;
	new_buf = custom_reallocate(current_buf, line_length, line_length + newline_idx + 1);
	if (!new_buf)
	{
		if (line_length)
		{
			free(current_buf);
			current_buf = NULL;
			line_length = 0;
		}
		return (-1);
	}

	strncat(new_buf, read_buf + read_idx, newline_idx);
	line_length += newline_idx;
	read_idx += newline_idx;

	if (newline_ptr)
	{
		*buffer = new_buf;
		if (size)
			*size = line_length;
		return (line_length);
	}
	else
	{
		free(new_buf);
		new_buf = NULL;
		if (line_length)
		{
			free(current_buf);
			current_buf = NULL;
		}
		return (-1);
	}
}
